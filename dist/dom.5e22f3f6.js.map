{"version":3,"sources":["dom.js"],"names":["window","dom","create","string","container","document","createElement","innerHTML","trim","content","firstChild","after","node","node2","parentNode","insertBefore","nextSibling","before","append","parent","child","appendChild","wrap","remove","removeChild","empty","x","array","push","console","log","attr","name","value","arguments","length","setAttribute","getAttribute","text","innerText","textContent","html","style","Object","object","key","class","add","className","classList","has","contains","on","eventName","fn","addEventListener","off","removeEventListener","find","selector","scope","querySelectorAll","children","siblings","Array","from","filter","n","next","nodeType","previous","previousSibling","each","nodeList","i","call","index","list"],"mappings":"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","file":"dom.5e22f3f6.js","sourceRoot":"..\\src","sourcesContent":["//增-------------------------------------------------------------------------------\r\nwindow.dom = {\r\n  create(string) {\r\n    const container = document.createElement(\"template\");\r\n    //template是一个万能容器他不显示\r\n    container.innerHTML = string.trim();\r\n    //把字符串写入template的html中，trim是防止html前面有空格，作用是清除字符串两边空格\r\n    return container.content.firstChild;\r\n    //因为template.firstChild不能直接得到这个元素，所以用上面这个\r\n  },\r\n  after(node, node2) {\r\n    node.parentNode.insertBefore(node2, node.nextSibling);\r\n    //只有前插这个接口，所以要对node的父节点去调用前插函数，把node2插到node后一个节点的前面\r\n  },\r\n  before(node, node2) {\r\n    node.parentNode.insertBefore(node2, node);\r\n    //新增一个哥哥\r\n  },\r\n  append(parent, child) {\r\n    parent.appendChild(child);\r\n    //新增一个儿子\r\n  },\r\n  wrap(node, parent) {\r\n    dom.before(node, parent);\r\n    parent.appendChild(node);\r\n    //新增一个爸爸\r\n  },\r\n  //删-------------------------------------------------------------------------------\r\n  remove(node) {\r\n    //   node.remove() 有点新可能不支持\r\n    node.parentNode.removeChild(node);\r\n    return node;\r\n  },\r\n  empty(node) {\r\n    // const { childNodes } = node;\r\n    //childNodes=node.childNodes，这是是新语法，node.childNodes本身就是一个数组输出的\r\n    const array = [];\r\n    let x = node.firstChild;\r\n    while (x) {\r\n      array.push(dom.remove(x));\r\n      x = node.firstChild;\r\n    }\r\n    console.log(array);\r\n  },\r\n  attr(node, name, value) {\r\n    //重载\r\n    if (arguments.length === 3) {\r\n      node.setAttribute(name, value);\r\n    }\r\n    if (arguments.length === 2) {\r\n      return node.getAttribute(name);\r\n    }\r\n\r\n    //改变一个节点的属性\r\n  },\r\n  text(node, content) {\r\n    //适配\r\n    if (arguments.length === 3) {\r\n      if (innerText in node) {\r\n        node.textContent = content;\r\n      } else {\r\n        node.innerText = content;\r\n      }\r\n    } else if (arguments.length === 2) {\r\n      if (innerText in node) {\r\n        return node.textContent;\r\n      } else {\r\n        return node.innerText;\r\n      }\r\n    }\r\n    //这里是为了兼容ie，ie8不支持textContent\r\n    //直接把内部的所有东西包括其他的标签都覆盖了，如果想单独改某一部分则用单独标签包裹后调用\r\n  },\r\n  html(node, string) {\r\n    if (arguments.length === 3) {\r\n      node.innerHTML = string;\r\n    } else if (arguments.length === 2) {\r\n      return node.innerHTML;\r\n    }\r\n  },\r\n  style(node, name, value) {\r\n    if (arguments.length === 3) {\r\n      // dom.style(div,\"color\",\"red\")\r\n      node.style[name] = value;\r\n    } else if (arguments.length === 2) {\r\n      if (typeof name === \"string\") {\r\n        // dom.style(div,\"color\")想知道color的值\r\n        return node.style[name];\r\n      } else if (name instanceof Object) {\r\n        //想写入一个属性,注意这里Object大写\r\n        const object = name;\r\n        for (let key in object) {\r\n          node.style[key] = object[key];\r\n        }\r\n      }\r\n    }\r\n  }, //改class\r\n  class: {\r\n    add(node, className) {\r\n      node.classList.add(className);\r\n    },\r\n    remove(node, className) {\r\n      node.classList.remove(className);\r\n    },\r\n    has(node, className) {\r\n      return node.classList.contains(className);\r\n    }\r\n  },\r\n  on(node, eventName, fn) {\r\n    node.addEventListener(eventName, fn);\r\n  },\r\n  off(node, eventName, fn) {\r\n    node.removeEventListener(eventName, fn);\r\n  },\r\n  find(selector, scope) {\r\n    return (scope || document).querySelectorAll(selector);\r\n  }, //scope用来指定在哪个标签里找\r\n  parent(node) {\r\n    return node.parentNode;\r\n  }, //父节点\r\n  children(node) {\r\n    return node.children;\r\n  }, //子节点\r\n  siblings(node) {\r\n    return Array.from(node.parentNode.children).filter(n => n !== node);\r\n  }, //兄弟节点，得到的伪数组转化成数组，然后对其使用filter，把不等于自己的写入数组\r\n  next(node) {\r\n    let x = node.nextSibling;\r\n    while (x && x.nodeType === 3) {\r\n      x = x.nextSibling;\r\n    }\r\n    return x;\r\n  }, //找到不是文本的下一个节点\r\n  previous(node) {\r\n    let x = node.previousSibling;\r\n    while (x && x.nodeType === 3) {\r\n      x = x.previousSibling;\r\n    }\r\n    return x;\r\n  }, //不是文本的前一个节点\r\n  each(nodeList, fn) {\r\n    for (let i = 0; i < nodeList.length; i++) {\r\n      fn.call(null, nodeList[i]);\r\n    }\r\n  }, //遍历\r\n  index(node) {\r\n    const list = dom.children(node.parentNode);\r\n    for (var i = 0; i < list.length; i++) {\r\n      if (list[i] === node) {\r\n        break;\r\n      }\r\n    }\r\n    return i;\r\n  }\r\n};\r\n"]}